from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from tg_bot.keyboards.end_game import get_end_game_keyboard
from tg_bot.keyboards.get_difficulty import get_difficulty_menu, difficulty_menu
from tg_bot.keyboards.welcome import create_welcome_keyboard
from tg_bot.misc.bot_make_move import bot_make_move
from tg_bot.misc.get_last_valid_letter import get_last_valid_letter

router = Router()


# /start
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <b>'–ì–æ—Ä–æ–¥–∞'</b>!", reply_markup=create_welcome_keyboard())


# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
@router.callback_query(lambda call: call.data == "start_game")
async def choose_difficulty(call: CallbackQuery):
    await call.message.edit_text(text="‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>:", reply_markup=get_difficulty_menu())
    await call.answer()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
@router.callback_query(lambda call: call.data == "back_to_menu")
async def back_to_menu(call: CallbackQuery):
    await call.message.edit_text(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <b>'–ì–æ—Ä–æ–¥–∞'</b>!",
                                 reply_markup=create_welcome_keyboard())
    await call.answer()


# –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤
@router.callback_query(lambda call: call.data == "leaderboard")
async def display_leaderboard(call: CallbackQuery):
    from bot import db
    chat_id = call.message.chat.id
    top_games = db.get_top_5_games(chat_id=chat_id)
    response = "<b>–õ—É—á—à–∏–µ 5 –∏–≥—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:</b>\n\n"

    for rank, (chat_id, city_count, created_at) in enumerate(top_games, start=1):
        response += f"üèÜ <b>–ú–µ—Å—Ç–æ {rank}</b> - <i>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}</i>\n" \
                    f"üåü <b>–ì–æ—Ä–æ–¥–æ–≤ –Ω–∞–∑–≤–∞–Ω–æ:</b> {city_count}\n\n"

    await call.message.edit_text(text=response,
                                 reply_markup=types.InlineKeyboardMarkup(
                                     inline_keyboard=[
                                         [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                                                                     callback_data="back_to_menu")]
                                     ]))
    await call.answer()


# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@router.callback_query(lambda call: call.data.startswith("difficulty_"))
async def difficulty_selection(call: CallbackQuery):
    from bot import db
    difficulty = call.data.split("_")[1]
    chat_id = call.message.chat.id
    if db.is_game_active(chat_id=chat_id):
        await call.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.",
                          show_alert=True)
        return

    db.create_new_game(chat_id=chat_id, difficulty=difficulty)
    await call.message.answer(text=f"‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ <b>{difficulty_menu[difficulty]}</b>. –í–∞—à —Ö–æ–¥!",
                              reply_markup=get_end_game_keyboard())
    await call.answer()
    await call.message.delete()


# –°–¥–∞—Ç—å—Å—è
@router.message(F.text == "üè≥Ô∏è –°–¥–∞—Ç—å—Å—è")
async def surrender(message: Message):
    from bot import db
    chat_id = message.chat.id
    if not db.is_game_active(chat_id=chat_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    city_count = db.get_city_count(chat_id=chat_id)
    db.end_game(chat_id=chat_id)
    await message.answer(f"üè≥Ô∏è –í—ã —Å–¥–∞–ª–∏—Å—å. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ: <b>{city_count}</b>",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <b>'–ì–æ—Ä–æ–¥–∞'</b>!", reply_markup=create_welcome_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
@router.message(F.text)
async def handle_city_input(message: Message):
    from bot import db, cites_all, cites_sng, cites_ru
    chat_id = message.chat.id
    city = message.text.strip().title()
    city = city.replace("–Å", "–ï").replace("—ë", "–µ")

    if not db.is_game_active(chat_id=chat_id):
        await message.answer(text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        print(db.is_game_active(chat_id))
        return

    if db.is_city_used(chat_id=chat_id, city=city):
        await message.answer(text=f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ <b>{city}</b> —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.\n–ù–∞–∑–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        return

    if db.get_game_current_turn(chat_id=chat_id) == "bot":
        await message.answer(f"‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –í–∞—à —Ö–æ–¥, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ —Å—Ö–æ–¥–∏—Ç –±–æ—Ç!")
        return

    difficulty = db.get_game_difficulty(chat_id=chat_id)
    if difficulty == 'easy':
        valid_cities = cites_all
    elif difficulty == 'medium':
        valid_cities = cites_sng
    elif difficulty == 'hard':
        valid_cities = cites_ru
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã.")
        print(difficulty)
        return

    city_variants = [city.lower(), city.replace("-", ' ').lower(), city.replace(' ', '-').lower()]
    city_found = False
    for city_variant in city_variants:
        if city_variant in (c.lower() for c in valid_cities):
            city_found = True
            break

    if not city_found:
        await message.answer(
            f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ <b>{city}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ù–∞–∑–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        return

    if db.get_last_bot_city(chat_id=chat_id):
        last_letter = get_last_valid_letter(db.get_last_bot_city(chat_id))
        if message.text[0].upper() != last_letter:
            await message.answer(
                f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã <b>{last_letter}</b>")
            return

    await message.answer(f"‚úÖ –í—ã –Ω–∞–∑–≤–∞–ª–∏ –≥–æ—Ä–æ–¥ <b>{city}</b>\n–ë–æ—Ç—É –Ω–∞ –±—É–∫–≤—É <b>{get_last_valid_letter(city)}</b>")
    db.create_new_move(chat_id=chat_id, player_type='player', city=city)

    bot_city = bot_make_move(chat_id, valid_cities, city)
    if bot_city:
        db.create_new_move(chat_id=chat_id, player_type='bot', city=bot_city)
        await message.answer(
            f"ü§ñ –ë–æ—Ç –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ <b>{bot_city}</b>\n–í–∞–º –Ω–∞ –±—É–∫–≤—É <b>{get_last_valid_letter(bot_city)}</b>")
    else:
        db.end_game(chat_id=chat_id)
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ—Ä–æ–¥. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove())
        await message.answer(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <b>'–ì–æ—Ä–æ–¥–∞'</b>!", reply_markup=create_welcome_keyboard())
